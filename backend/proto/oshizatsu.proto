syntax = "proto3";

package oshizatsu;

option go_package = "oshizatsu-backend/proto";

import "google/protobuf/timestamp.proto";

// 認証サービス
service AuthService {
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);
  rpc UpdateUserInfo(UpdateUserInfoRequest) returns (UpdateUserInfoResponse);
}

// チャンネル管理サービス
service ChannelService {
  rpc SubscribeChannel(SubscribeChannelRequest) returns (SubscribeChannelResponse);
  rpc UnsubscribeChannel(UnsubscribeChannelRequest) returns (UnsubscribeChannelResponse);
  rpc GetSubscribedChannels(GetSubscribedChannelsRequest) returns (GetSubscribedChannelsResponse);
}

// 通知サービス
service NotificationService {
  rpc RegisterFCMToken(RegisterFCMTokenRequest) returns (RegisterFCMTokenResponse);
  rpc UnregisterFCMToken(UnregisterFCMTokenRequest) returns (UnregisterFCMTokenResponse);
  rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsResponse);
}

// 認証関連のメッセージ
message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
  UserInfo user_info = 3;
}

message LogoutRequest {
  string access_token = 1;
}

message LogoutResponse {
  bool success = 1;
}

message GetUserInfoRequest {
  string access_token = 1;
}

message GetUserInfoResponse {
  UserInfo user_info = 1;
}

message UpdateUserInfoRequest {
  string access_token = 1;
  string name = 2;
  string picture = 3;
}

message UpdateUserInfoResponse {
  bool success = 1;
  string message = 2;
  UserInfo user_info = 3;
}

message UserInfo {
  string id = 1;
  string email = 2;
  string name = 3;
  string picture = 4;
}

// チャンネル関連のメッセージ
message SubscribeChannelRequest {
  string channel_id = 1;
  string channel_name = 2;
  string access_token = 3;
}

message SubscribeChannelResponse {
  bool success = 1;
  string message = 2;
}

message UnsubscribeChannelRequest {
  string channel_id = 1;
  string access_token = 2;
}

message UnsubscribeChannelResponse {
  bool success = 1;
  string message = 2;
}

message GetSubscribedChannelsRequest {
  string access_token = 1;
}

message GetSubscribedChannelsResponse {
  repeated Channel channels = 1;
}

message Channel {
  string id = 1;
  string name = 2;
  string channel_id = 3;
  google.protobuf.Timestamp last_live_scheduled = 4;
  bool is_live = 5;
}

// 通知関連のメッセージ
message RegisterFCMTokenRequest {
  string fcm_token = 1;
  string access_token = 2;
}

message RegisterFCMTokenResponse {
  bool success = 1;
  string message = 2;
}

message UnregisterFCMTokenRequest {
  string fcm_token = 1;
  string access_token = 2;
}

message UnregisterFCMTokenResponse {
  bool success = 1;
  string message = 2;
}

message GetNotificationsRequest {
  string access_token = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message GetNotificationsResponse {
  repeated Notification notifications = 1;
  int32 total_count = 2;
}

message Notification {
  string id = 1;
  string title = 2;
  string body = 3;
  string channel_id = 4;
  string channel_name = 5;
  NotificationType type = 6;
  google.protobuf.Timestamp created_at = 7;
  bool is_read = 8;
}

enum NotificationType {
  SCHEDULED = 0;
  STARTED = 1;
}
